{
    "contents" : "#' @title Define a saving function for object reference\n#' @param test.fun a function returning a boolean.\n#' @param save.fun the underlying saving function.\n#' @param match.args a character vector giving the names of the function \\code{save.fun} arguments for the data \n#' to save and the name of the resulting file. The order is important.\n#' @param format.default the default format to use in the resulting function\n#' @return A saving function working with object references (that is character strings). The resulting function has\n#' argument \\code{obj.ref}, \\code{folder}, \\code{naming.fun} (which is by default \\code{\\link{naming.default}}),\n#' \\code{format} (which is by default \\code{format.default}), \\code{...} additional arguments for the \\code{save.fun},\n#' \\code{ask} which is passed to \\code{\\link{ls.test}}, \\code{verbose} and \\code{envir}.\n#' @export\n#' @examples\n#' \\donttest{\n#' histogram_normal=ggplot(data.frame(x=rnorm(1000)))+geom_histogram(aes(x=x),binwidth=0.5)\n#' histogram_log.normal=ggplot(data.frame(x=rlnorm(1000)))+geom_histogram(aes(x=x),binwidth=0.5)\n#' save_ggplot_default=define_save_obj.ref(is.ggplot,ggsave,match.args=c(\"plot\",\"filename\"),format.default=\"png\")\n#' save_ggplot_default(\"histogram_normal\")\n#' save_ggplot_default()\n#' naming_wide=define_naming(str.after=\"-wide\")\n#' save_ggplot_wide=enforce.default(save_ggplot_default,list(naming.fun=naming_wide,width=20,height=5))\n#' save_ggplot_wide()\n#' }\ndefine_save_obj.ref=function(test.fun,save.fun,match.args,format.default){\n  save_obj.ref=function(obj.ref,folder=\".\",naming.fun=naming.default,format=format.default,...,\n                        ask=FALSE,verbose=TRUE,envir=parent.frame()){\n    args=c(as.list(environment()),list(...))\n    args=args[!names(args)%in%c(\"obj.ref\",\"folder\",\"naming.fun\",\"format\",\"envir\",\"verbose\",\"ask\")]\n    \n    if(missing(obj.ref)) obj.ref=ls.test(test.fun=test.fun,ask=ask,envir=envir)\n    args=c(setNames(list(NULL,NULL),match.args),args)\n    \n    for(obj.ref.k in obj.ref){\n      object=get(obj.ref.k,envir)\n      name=naming.fun(folder,obj.ref.k,format)\n      args[[1]]=object\n      args[[2]]=name\n      if(!dir.exists(dir.name<-dirname(name))){\n        dir.create(dir.name,recursive=TRUE)\n      }\n      do.call(save.fun,args)\n      if(verbose) message(name,\" is saved in folder \",file_path_as_absolute(folder))\n    }\n  }\n}\n\n#' @title Save automatically ggplot objects\n#' @rdname autosave_ggplot\n#' @param obj.ref name(s) of the ggplot object(s).\n#' @param folder the folder where the result will be saved.\n#' @param naming.fun the naming function. By default \\code{naming.fun=naming.default}.\n#' @param format a character string giving the format of the final saved plot.\n#' @param ... additional arguments used in the underlying saving function.\n#' @parm ask a boolean specifying if the user should be asked for selection.\n#' @param verbose used to able/disable message.\n#' @param envir the environment in which the ggplot objects should be looked for.\n#' @export\n#' @examples\n#' \\donttest{\n#' histogram_normal=ggplot(data.frame(x=rnorm(1000)))+geom_histogram(aes(x=x),binwidth=0.5)\n#' histogram_log.normal=ggplot(data.frame(x=rlnorm(1000)))+geom_histogram(aes(x=x),binwidth=0.5)\n#' save_ggplot(\"histogram_normal\")\n#' save_ggpdf(\"histogram_log.normal\")\n#' library(\"devEMF\")\n#' save_ggemf()\n#' }\nsave_ggplot=define_save_obj.ref(is.ggplot,ggsave,match.args=c(\"plot\",\"filename\"),format.default=\"png\")\n\n#' @rdname autosave_ggplot\n#' @export\nsave_ggpdf=enforce.default(save_ggplot,list(format=\"pdf\"))\n\n#' @rdname autosave_ggplot\n#' @export\nsave_ggemf=define_save_obj.ref(is.ggplot,ggsave.emf,match.args=c(\"plot\",\"filename\"),format.default=\"emf\")\n\n#' @title Save automatically gtable objects\n#' @description\n#' See documentation of \\code{\\link{save_ggtable}} for a description of the parameter. \\code{save_data.frame}\n#' is constructed by \\code{\\link{define_save_obj.ref}}.\n#' @export\n#' @examples\n#' \\donttest{\n#' wt_per_cyl=ggplot(mtcars,aes(x=as.factor(cyl),y=wt))+geom_boxplot()+xlab(\"\")\n#' breaks=data.frame(cyl=c(4,6,8),type=c(rep(\"small cars\",2),\"big cars\"))\n#' breaks=get_x.info(breaks,\"cyl\",\"type\")\n#' wt_per_cyl=add_x.info(wt_per_cyl,breaks,y.level=-0.25)\n#' save_ggtable(\"wt_per_cyl\")\n#' save_ggtable(\"wt_per_cyl\",format=\"emf\")\n#' }\nsave_ggtable=define_save_obj.ref(is.grob,write.ggtable,match.args=c(\"plot\",\"filename\"),format.default=\"png\")\n\n#' @title Save automatically data frame objects\n#' @description\n#' See documentation of \\code{\\link{save_ggplot}} for a description of the parameter. \\code{save_data.frame}\n#' is constructed by \\code{\\link{define_save_obj.ref}}.\n#' @details\n#' By default, the data frames are saved without row names.\n#' @seealso \\code{\\link{save_data.frame.wb}}\n#' @export\n#' @examples\n#' \\donttest{\n#' data(mtcars,iris)\n#' save_data.frame()\n#' }\nsave_data.frame=enforce.default(\n  define_save_obj.ref(is.data.frame,write.xlsx2,match.args=c(\"x\",\"file\"),format.default=\"xlsx\"),\n  list(row.names=FALSE))\n\nwrite.in.wb=function(data,sheet,wb,...){\n  createSheet(object = wb, name = sheet)\n  writeWorksheet(object = wb, data = data, sheet = sheet, ...)\n}\n\nsave_data.frame.wb.base=define_save_obj.ref(is.data.frame,write.in.wb,match.args=c(\"data\",\"sheet\"),format.default=\"\")\n\n#' @title Save automatically data frames in spreadsheets of a single workbook\n#' @param file The name of the resulting workbook. By default \\code{file=\"all_dataframes.xlsx\"}.\n#' @param ... Additional arguments to pass on to \\code{\\link{writeWorksheet}}\n#' @param envir the environment in which the data frames should be looked for.\n#' @details\n#' By default, the data frames are saved without row names.\n#' @seealso \\code{\\link{save_data.frame}}\n#' @export\n#' @examples\n#' \\donttest{\n#' data(mtcars,iris)\n#' save_data.frame.wb()\n#' }\nsave_data.frame.wb=function(file=\"all_dataframes.xlsx\",...,envir=parent.frame()){\n  wb=loadWorkbook(file,create=TRUE)\n  save_data.frame.wb.base(naming.fun=identity_naming,wb=wb,...,ask=TRUE,envir=envir)\n  saveWorkbook(wb)\n}",
    "created" : 1380064419422.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2275633842",
    "id" : "D416CF3F",
    "lastKnownWriteTime" : 1384997730,
    "path" : "~/R&D/R packages/Source packages/autosave/R/toolbox_define.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}