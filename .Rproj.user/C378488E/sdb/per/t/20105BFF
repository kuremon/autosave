{
    "contents" : "#' @title Enforce default values of a function\n#' @param fun function to modify\n#' @param default a named vector or list of new default values\n#' @param new.args.before.dots boolean indicating wether or not the new arguments should be placed before \\code{...}.\n#' If the dots argument is not present or \\code{new.args.before.dots} is set to \\code{FALSE}, new arguments\n#' appear at the end.\n#' @return The function \\code{fun} with default values same as in \\code{default}.\n#' @details The default values of \\code{fun} not appearing in \\code{default} are left unchanged.\n#' @export\n#' @examples\n#' \\donttest{\n#' fun=function(x=1:10,f,...,k=sum(x)){k}\n#' fun()\n#' fun1=enforce.default(fun,list(e=45,x=1))\n#' fun2=enforce.default(fun,list(e=45))\n#' fun3=enforce.default(fun,list(k=quote(var(x))))\n#' fun4=enforce.default(fun,list(a=85),show.warning=TRUE) # should produce a warning\n#' }\nenforce.default=function(fun,default,new.args.before.dots=TRUE,show.warning=FALSE){\n  default=as.pairlist(default)\n  args=formals(fun)\n  midx=match(names(default),names(args))\n  \n  existing.args=which(!is.na(midx))\n  args[midx[existing.args]]=default[existing.args]\n  \n  new.args=which(is.na(midx))\n  if(show.warning&&(length(new.args)>0)) warning(\"Introducing new arguments in the function.\",call.=FALSE)\n  \n  dots.idx=which(names(args)==\"...\")\n  if(new.args.before.dots&&(length(dots.idx)>0)){\n    args=insert(args,default[new.args],dots.idx-1+seq(new.args))\n  }else{\n    args=c(args,default[new.args])\n  }\n  formals(fun)=args\n  fun\n}\n\n#' @title List Objects passing a given test\n#' @param test.fun a function returning a boolean.\n#' @param ask should the user be asked to include elements in the list.\n#' @param envir the environment where \\code{ls.test} is looking for objects.\n#' @return A character vector.\n#' @export\n#' @examples\n#' \\donttest{\n#' ls.test(is.numeric) # produce a list of all the numeric objects present in envir\n#' }\nls.test=function(test.fun,ask=TRUE,envir=parent.frame()){\n  all.objects=ls(envir=envir)\n  to.keep=sapply(all.objects,function(obj.ref)test.fun(get(obj.ref,envir=envir)))\n  objects=all.objects[to.keep]\n  if(ask&&(length(objects)>0)){\n    ask.fun=function(obj.ref) readline(paste(\"Should\",obj.ref,\"be included? (y/n): \"))==\"y\"\n    objects=objects[sapply(objects,ask.fun)]\n  }\n  objects\n}\n\n#' @title List Objects passing a given test\n#' @rdname naming\n#' @param test.fun a function returning a boolean.\n#' @param ask should the user be asked to include elements in the list.\n#' @param envir the environment where \\code{ls.test} is looking for objects.\n#' @return A naming function.\n#' @details\n#' By default the returning function will transform all the dots in names by underscores. This feature is useful\n#' when used with saving functions as dots in names are misunderstood as extension when saving. \n#' For example if \\code{naming.default(\"a.b\")} gives \\code{\"a_b\"}.\n#' @export\n#' @examples\n#' \\donttest{\n#' naming_wide=define_naming(str.after=\"-wide\")\n#' naming_wide(name=\"this_plot\",format=\"png\")\n#' }\ndefine_naming=function(str.before=\"\",str.after=\"\"){\n  function(folder=\".\",name,format=\"\"){\n    name=paste0(str.before,gsub(\"\\\\.\",\"_\",name),str.after)\n    if(nchar(format)>0) name=paste(name,format,sep=\".\")\n    if(nchar(folder)>0) name=file.path(folder,name)\n    name\n  }\n}\n\n#' @rdname naming\n#' @export\nnaming.default=define_naming()\n\n#' @rdname naming\n#' @export\nidentity_naming=function(folder,name,format) name\n\n#' @title Save a ggplot object as an emf file\n#' @param plot The ggplot object to write.\n#' @param filename The name of the file.\n#' @param ... The additional arguments to pass on to \\code{\\link{emf}}.\n#' @export\nggsave.emf=function(plot,filename,...){\n  emf(file=filename,...)\n  print(plot)\n  dev.off()\n}\n\nwrite.ggtable=function(plot,filename,...){\n  do.call(file_ext(filename),list(filename,...))\n  grid.draw(plot)\n  dev.off()\n}",
    "created" : 1380064421124.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3220212189",
    "id" : "20105BFF",
    "lastKnownWriteTime" : 1380071527,
    "path" : "~/R&D/R packages/Source packages/autosave/R/toolbox_additional.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}